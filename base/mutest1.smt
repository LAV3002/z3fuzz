; func 2
(define-fun mor ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (bvor lhs rhs))
(define-fun mand ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (bvand lhs rhs))
(define-fun mxor ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (bvxor lhs rhs))
(define-fun madd ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (bvadd lhs rhs))
(define-fun msub ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (bvsub lhs rhs))
(define-fun mmul ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (bvmul lhs rhs))
(define-fun msdiv ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (bvsdiv lhs rhs))
(define-fun mudiv ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (bvudiv lhs rhs))
(define-fun meq ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (ite (= lhs rhs) (_ bv1 64) (_ bv0 64)))
(define-fun mult ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (ite (bvult lhs rhs) (_ bv1 64) (_ bv0 64)))
(define-fun mule ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (ite (bvule lhs rhs) (_ bv1 64) (_ bv0 64)))
(define-fun muge ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (ite (bvuge lhs rhs) (_ bv1 64) (_ bv0 64)))
(define-fun mugt ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (ite (bvugt lhs rhs) (_ bv1 64) (_ bv0 64)))
(define-fun mslt ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (ite (bvslt lhs rhs) (_ bv1 64) (_ bv0 64)))
(define-fun msle ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (ite (bvsle lhs rhs) (_ bv1 64) (_ bv0 64)))
(define-fun msge ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (ite (bvsge lhs rhs) (_ bv1 64) (_ bv0 64)))
(define-fun msgt ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (ite (bvsgt lhs rhs) (_ bv1 64) (_ bv0 64)))
(define-fun msrem ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (bvsrem lhs rhs))
(define-fun msmod ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (bvsmod lhs rhs))
(define-fun murem ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (bvurem lhs rhs))
(define-fun mshl ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (bvshl lhs rhs))
(define-fun mlshr ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (bvlshr lhs rhs))
(define-fun mashr ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (bvashr lhs rhs))
(define-fun mmix ((lhs (_ BitVec 64)) (rhs (_ BitVec 64))) (_ BitVec 64) (concat ((_ extract 31 0) lhs) ((_ extract 63 32) rhs)))
; func 1
(define-fun mnot ((lhs (_ BitVec 64))) (_ BitVec 64) (bvnot lhs))
; symbols
(declare-fun SV1 () (_ BitVec 64))
(declare-fun SV2 () (_ BitVec 64))
(declare-fun SV3 () (_ BitVec 64))
(declare-fun SV4 () (_ BitVec 64))
; body
(define-fun T32 () (_ BitVec 64) ( msdiv SV3 SV2 ))
(define-fun T31 () (_ BitVec 64) ( _ bv14461532240034770438 64 ))
(define-fun T30 () (_ BitVec 64) ( _ bv4435909437527033542 64 ))
(define-fun T29 () (_ BitVec 64) ( meq T30 T31 ))
(define-fun T28 () (_ BitVec 64) ( mlshr T29 T32 ))
(define-fun T27 () (_ BitVec 64) ( _ bv17820747065717437018 64 ))
(define-fun T26 () (_ BitVec 64) ( mmul SV4 T27 ))
(define-fun T25 () (_ BitVec 64) ( mor T26 T28 ))
(define-fun T24 () (_ BitVec 64) ( mnot T25 ))
(define-fun T23 () (_ BitVec 64) ( msdiv SV3 SV2 ))
(define-fun T22 () (_ BitVec 64) ( _ bv14461532240034770438 64 ))
(define-fun T21 () (_ BitVec 64) ( meq SV4 T22 ))
(define-fun T20 () (_ BitVec 64) ( mlshr T21 T23 ))
(define-fun T19 () (_ BitVec 64) ( mnot T20 ))
(define-fun T18 () (_ BitVec 64) ( msdiv SV3 SV2 ))
(define-fun T17 () (_ BitVec 64) ( _ bv3984807846243667499 64 ))
(define-fun T16 () (_ BitVec 64) ( mlshr T17 T18 ))
(define-fun T15 () (_ BitVec 64) ( mnot T16 ))
(define-fun T14 () (_ BitVec 64) ( mand T15 T19 ))
(define-fun T13 () (_ BitVec 64) ( meq T14 T24 ))
(define-fun T12 () (_ BitVec 64) ( _ bv3690448348329650816 64 ))
(define-fun T11 () (_ BitVec 64) ( mule T12 SV3 ))
(define-fun T10 () (_ BitVec 64) ( mor T11 SV2 ))
(define-fun T9 () (_ BitVec 64) ( mnot T10 ))
(define-fun T8 () (_ BitVec 64) ( _ bv4037001787358588076 64 ))
(define-fun T7 () (_ BitVec 64) ( mule T8 SV3 ))
(define-fun T6 () (_ BitVec 64) ( mnot T7 ))
(define-fun T5 () (_ BitVec 64) ( _ bv16873488595705672815 64 ))
(define-fun T4 () (_ BitVec 64) ( mule SV3 T5 ))
(define-fun T3 () (_ BitVec 64) ( mnot T4 ))
(define-fun T2 () (_ BitVec 64) ( mand T3 T6 ))
(define-fun T1 () (_ BitVec 64) ( meq T2 T9 ))
(define-fun T0 () (_ BitVec 64) ( mslt T1 T13 ))
; epilog
(assert (= T0 (_ bv1 64)))
(check-sat)
